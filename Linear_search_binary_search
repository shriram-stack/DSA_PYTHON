{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYtx+pBu+4DQ3OQ9Wp1NYE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shriram-stack/DSA_PYTHON/blob/main/Linear_search_binary_search\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**LINEAR** **SEARCH**"
      ],
      "metadata": {
        "id": "lGEgHlJJTgOH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Linear search is a simple searching algorithm used to find an element in a list or array. It sequentially checks each element one by one until the desired element is found or the list ends."
      ],
      "metadata": {
        "id": "DM90mcNoS8_5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "How It Works\n",
        "Start from the first element.\n",
        "Compare each element with the target value.\n",
        "If a match is found, return the index.\n",
        "If the loop completes without finding the target, return -1 (or indicate \"Not Found\")."
      ],
      "metadata": {
        "id": "E3xmkNNVTAry"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Time Complexity\n",
        "Best Case (O(1)) → The target is the first element.\n",
        "Worst Case (O(n)) → The target is at the end or not in the list.\n",
        "Average Case (O(n)) → On average, you check half of the elements."
      ],
      "metadata": {
        "id": "TuAgZXF9TC08"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tSE8MwWzS4mQ"
      },
      "outputs": [],
      "source": [
        "def linear_search(arr, target):\n",
        "    for i in range(len(arr)):\n",
        "        if arr[i] == target:\n",
        "            return i  # Return the index where the element is found\n",
        "    return -1  # If not found\n",
        "\n",
        "# Example usage\n",
        "numbers = [10, 25, 30, 45, 50]\n",
        "target = 30\n",
        "\n",
        "index = linear_search(numbers, target)\n",
        "if index != -1:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Output:Element found at index 2"
      ],
      "metadata": {
        "id": "5-__OTn8THyN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Advantages\n",
        "✅ Simple to implement\n",
        "✅ Works on unsorted lists\n",
        "\n",
        "Disadvantages\n",
        "❌ Slow for large lists (O(n) time complexity)\n",
        "❌ Inefficient compared to Binary Search (O(log n)), which requires sorting"
      ],
      "metadata": {
        "id": "tAHPUkGETL4j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "When to Use Linear Search\n",
        "When the list is small\n",
        "When the list is unsorted\n",
        "When simplicity is more important than speed"
      ],
      "metadata": {
        "id": "g-DdEganTON6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "binary search"
      ],
      "metadata": {
        "id": "GtVYTcXAT8_v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Binary search is an efficient searching algorithm that works on sorted arrays/lists. It divides the search space in half at each step, making it much faster than linear search."
      ],
      "metadata": {
        "id": "eTtUed_tT4BR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "How Binary Search Works\n",
        "Start with two pointers:\n",
        "Left at the first element (low = 0)\n",
        "Right at the last element (high = len(arr) - 1)\n",
        "Find the middle element (mid = (low + high) // 2).\n",
        "Compare the middle element with the target:\n",
        "If it's a match, return the index.\n",
        "If the target is smaller, search the left half (high = mid - 1).\n",
        "If the target is larger, search the right half (low = mid + 1).\n",
        "Repeat until low > high, meaning the element is not found"
      ],
      "metadata": {
        "id": "VyuQWjmzUnz-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Time Complexity\n",
        "Case\tTime Complexity\n",
        "Best Case\tO(1) (If the middle element is the target)\n",
        "Worst Case\tO(log n) (Divides the list in half at each step)\n",
        "Average Case\tO(log n)\n",
        "🔹 Faster than Linear Search (O(n)) for large lists.\n",
        "🔹 Requires the list to be sorted before searching."
      ],
      "metadata": {
        "id": "xsdVQnJDU0tE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Binary Search in Python (Iterative)**"
      ],
      "metadata": {
        "id": "pYK5z51-U56c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def binary_search(arr, target):\n",
        "    low, high = 0, len(arr) - 1\n",
        "\n",
        "    while low <= high:\n",
        "        mid = (low + high) // 2  # Find the middle index\n",
        "\n",
        "        if arr[mid] == target:\n",
        "            return mid  # Target found\n",
        "        elif arr[mid] < target:\n",
        "            low = mid + 1  # Search right half\n",
        "        else:\n",
        "            high = mid - 1  # Search left half\n",
        "\n",
        "    return -1  # Target not found\n",
        "\n",
        "# Example usage\n",
        "numbers = [10, 25, 30, 45, 50]  # Sorted list\n",
        "target = 30\n",
        "\n",
        "index = binary_search(numbers, target)\n",
        "if index != -1:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found\")\n"
      ],
      "metadata": {
        "id": "_VBuYdGdVCqD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Output:Element found at index 2"
      ],
      "metadata": {
        "id": "9jh3JtL5WBMt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Binary Search (Recursive Version)**"
      ],
      "metadata": {
        "id": "yMziX1kZXbIS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def binary_search_recursive(arr, target, low, high):\n",
        "    if low > high:\n",
        "        return -1  # Base case: not found\n",
        "\n",
        "    mid = (low + high) // 2\n",
        "\n",
        "    if arr[mid] == target:\n",
        "        return mid\n",
        "    elif arr[mid] < target:\n",
        "        return binary_search_recursive(arr, target, mid + 1, high)  # Right half\n",
        "    else:\n",
        "        return binary_search_recursive(arr, target, low, mid - 1)  # Left half\n",
        "\n",
        "# Example usage\n",
        "numbers = [10, 25, 30, 45, 50]  # Sorted list\n",
        "target = 30\n",
        "\n",
        "index = binary_search_recursive(numbers, target, 0, len(numbers) - 1)\n",
        "if index != -1:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1pGmH0wsXmrR",
        "outputId": "49a8d8c2-bd68-4b9e-84f8-53547fc8db7f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Element found at index 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Python’s Built-in Binary Search (bisect module)**\n",
        "Python provides a built-in way to perform binary search using the bisect module:"
      ],
      "metadata": {
        "id": "-WNCQzpuX74O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import bisect\n",
        "\n",
        "numbers = [10, 25, 30, 45, 50]  # Sorted list\n",
        "target = 30\n",
        "\n",
        "index = bisect.bisect_left(numbers, target)\n",
        "if index < len(numbers) and numbers[index] == target:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found\")\n"
      ],
      "metadata": {
        "id": "NOdYQtyRX8xY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "bisect_left() returns the index where the element should be inserted. If it matches the target, the element is found."
      ],
      "metadata": {
        "id": "WIV2LKGwYEDC"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jZp5D0jtYRT2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}